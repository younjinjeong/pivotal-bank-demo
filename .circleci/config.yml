# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  code_checkout:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
      # parallelism: 4
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - restore_cache:
          keys:
            - pivotal-bank-source-{{ .Branch }}-{{ .Revision }}
            - pivotal-bank-source-{{ .Branch }}-
            - pivotal-bank-source-

      - checkout

      - save_cache:
          key: pivotal-bank-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      - persist_to_workspace:
          root: ~/repo
          paths:
            - . 

  build_quotes_service:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    # parallelism: 4
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:

      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - quotes-service-{{ checksum "quotes-service/build.gradle" }}
            - quotes-service-

      - run:
          name: quotes-service build
          command: |
            cd quotes-service
            ./gradlew build
            cd ..

      - save_cache:
          name: Save cache for quotes-service
          paths:
            - "~/repo/quotes-service/.gradle"
          key: quotes-service-{{ checksum "quotes-service/build.gradle" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - quotes-service/



  build_accounts_service:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    # parallelism: 4
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - restore_cache:
          keys:
            - accounts-service-{{ checksum "accounts-service/build.gradle" }}
            - accounts-service-

      - attach_workspace:
          at: ~/repo

      - run:
          name: accounts-service build
          command: |
            cd accounts-service
            ./gradlew build
            cd ..

      - save_cache:
          name: Save cache for accounts-service
          paths:
            - "~/repo/accounts-service/.gradle"
          key: accounts-service-{{ checksum "accounts-service/build.gradle" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - accounts-service/

  build_portfolio_service:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    # parallelism: 4
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - restore_cache:
          keys:
            - portfolio-service-{{ checksum "portfolio-service/build.gradle" }}
            - portfolio-service-

      - attach_workspace:
          at: ~/repo

      - run:
          name: portfolio-service build
          command: |
            cd portfolio-service
            ./gradlew build
            cd ..

      - save_cache:
          name: Save cache for portfolio-service
          paths:
            - "~/repo/portfolio-service/.gradle"
          key: portfolio-service-{{ checksum "portfolio-service/build.gradle" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - portfolio-service/

  build_web_ui:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    # parallelism: 4
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - restore_cache:
          keys:
            - web-ui-{{ checksum "web-ui/build.gradle" }}
            - web-ui-

      - attach_workspace:
          at: ~/repo

      - run:
          name: web-ui build
          command: |
            cd web-ui
            ./gradlew build
            cd ..

      - save_cache:
          name: Save cache for web-ui
          paths:
            - "~/repo/web-ui/.gradle/"
          key: web-ui-{{ checksum "web-ui/build.gradle" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - web-ui/

  build_user_service:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    # parallelism: 4
    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - restore_cache:
          keys:
            - user-service-{{ checksum "build.gradle" }}
            - user-service-

      - attach_workspace:
          at: ~/repo

      - run:
          name: user-service build
          command: |
            cd user-service
            ./gradlew build
            cd ..

      - save_cache:
          name: Save cache for user-service
          paths:
            - "~/repo/user-service/.gradle/"
          key: user-service-{{ checksum "user-service/build.gradle" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - user-service


  build_analytics_scdf_sink:
    docker:
      - image: circleci/openjdk:11-jdk
        environment: 
          - ES_HOST: localhost
          - ES_PORT: 9300
          - ES_HTTP_PORT: 9200 
          - VCAP_SERVICES_ES_CREDENTIALS_HOST: localhost
          - VCAP_SERVICES_ES_CREDENTIALS_PORT: 9300
      
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.1.1
        environment:
          - cluster.name: elasticsearch
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - discovery.type: single-node 

    working_directory: ~/repo

    steps:
      - restore_cache:
            keys:
              - analytics-scdf-sink-{{ checksum "analytics-scdf-sink/pom.xml" }}
              - analytics-scdf-sink-

      - attach_workspace:
          at: ~/repo
      
      - run:
          name: analytics-scdf-sink build 
          command: |
            cd analytics-scdf-sink
            ./mvnw clean package -Dmaven.test.skip=true
            cd ..
      
      - save_cache:
          name: Save cache for analytics-scdf-sink 
          paths:
            - "~/repo/analytics-scdf-sink/.mvn"
          key: analytics-scdf-sink-{{ checksum "analytics-scdf-sink/pom.xml" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - analytics-scdf-sink

  build_analytics_service:
    docker:
      - image: circleci/openjdk:11-jdk
        environment: 
          - ES_HOST: localhost
          - ES_PORT: 9300
          - ES_HTTP_PORT: 9200 
          - VCAP_SERVICES_ES_CREDENTIALS_HOST: localhost
          - VCAP_SERVICES_ES_CREDENTIALS_PORT: 9300
      
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.1.1
        environment:
          - cluster.name: elasticsearch
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node 

    working_directory: ~/repo

    steps:
      - restore_cache:
            keys:
              - analytics-service-{{ checksum "analytics-service/build.gradle" }}
              - analytics-service-

      - attach_workspace:
          at: ~/repo

      - run: 
          name: install Httpie and test elasticsearch
          command: |
            sudo apt-get install httpie -y 
            http $ES_HOST:$ES_HTTP_PORT

      - run:
          name: analytics-service build
          command: |
            cd analytics-service
            ./gradlew build -x test
            cd ..
      
      - save_cache: 
          name: Save cache for analytics-service 
          paths: "~/repo/analytics-service/.mvn"
          key: analytics-service-{{ checksum "analytics-service/pom.xml" }}

      - persist_to_workspace:
          root: ~/repo
          paths:
            - analytics-service

  test_quotes_service:

    docker:
      - image: circleci/openjdk:11-jdk
    # parallelism: 4
    working_directory: ~/repo

    steps:
      - restore_cache:
          keys:
            - quotes-service-{{ checksum "quotes-service/build.gradle" }}
            - quotes-service-

      - attach_workspace:
          at: ~/repo

      - run:
            name: quotes-service test
            command: |
              cd quotes-service
              ./gradlew test --tests '**'
              cd ..

      - save_cache:
          name: Save cache for quotes-service
          paths:
            - "~/repo/quotes-service/.gradle"
          key: quotes-service-{{ checksum "quotes-service/build.gradle" }}


  test_accounts_service:

    docker:
      - image: circleci/openjdk:11-jdk
      # parallelism: 4

    working_directory: ~/repo

    steps:
      - restore_cache:
          keys:
            - accounts-service-{{ checksum "accounts-service/build.gradle" }}
            - accounts-service-


      - attach_workspace:
          at: ~/repo

      - run:
          name: accounts-service test
          command: |
            cd accounts-service
            ./gradlew test --tests '**'
            cd ..

      - save_cache:
          name: Save cache for accounts service
          paths:
            - "~/repo/accounts-service/.gradle"
          key: accounts-service-{{ checksum "accounts-service/build.gradle" }}


  test_portfolio_service:

    docker:
      - image: circleci/openjdk:11-jdk
      # parallelism: 4
    working_directory: ~/repo

    steps:
      - restore_cache:
          keys:
            - portfolio-service-{{ checksum "portfolio-service/build.gradle" }}
            - portfolio-service-

      - attach_workspace:
          at: ~/repo

      - run:
          name: portfolio-service test
          command: |
            cd portfolio-service
            ./gradlew test --tests '**'
            cd ..

      - save_cache:
          name: Save cache for portfolio service
          paths:
            - "~/repo/portfolio-service/.gradle"
          key: portfolio-service-{{ checksum "portfolio-service/build.gradle" }}


  test_web_ui:

    docker:
      - image: circleci/openjdk:11-jdk
      # parallelism: 4
    working_directory: ~/repo

    steps:
      - restore_cache:
          keys:
            - web-ui-{{ checksum "web-ui/build.gradle" }}
            - web-ui-

      - attach_workspace:
          at: ~/repo

      - run:
          name: webui-service test
          command: |
            cd web-ui
            ./gradlew test --tests '**'
            cd ..
      
      - save_cache:
          name: Save cache for web-ui
          paths:
            - "~/repo/web-ui/.gradle"
          key: web-ui-{{ checksum "web-ui/build.gradle" }}


  test_user_service:

    docker:
      - image: circleci/openjdk:11-jdk
      # parallelism: 4
    working_directory: ~/repo

    steps:
      - restore_cache:
          keys:
            - user-service-{{ checksum "user-service/build.gradle" }}
            - user-service-

      - attach_workspace:
          at: ~/repo

      - run:
          name: user-service test
          command: |
            cd user-service
            ./gradlew test --tests '**'
            cd ..
      
      - save_cache:
          name: Save cache for user-service
          paths:
            - "~/repo/user-service/.gradle"
          key: user-service-{{ checksum "user-service/build.gradle" }}
  
  deploy_to_staging:

    docker: 
      - image: circleci/openjdk:11-jdk 
    
    working_directory: ~/repo

    steps:
      
      - attach_workspace:
          at: ~/repo

      - restore_cache:
          keys:
            - portfolio-service-{{ checksum "portfolio-service/build.gradle" }}
            - web-ui-{{ checksum "web-ui/build.gradle" }}
            - accounts-service-{{ checksum "accounts-service/build.gradle" }}
            - user-service-{{ checksum "user-service/build.gradle" }}
            - quotes-service-{{ checksum "quotes-service/build.gradle" }}
  
      - run:
            name: Setup CF CLI 
            command: |
              curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
              sudo dpkg -i cf-cli_amd64.deb
              cf -v
              cf api ${CF_ENDPOINT}  # alternately target your private Cloud Foundry deployment
              cf auth "$CF_USER" "$CF_PASSWORD"
              cf target -o "$CF_ORG" -s "$CF_SPACE"

      - run:
            name: Prepare PWS Services 
            command: | 
              cd scripts
              ./1_createServices.sh
      
      - run:
            name: Deploy Pivotal Bank to PAS 
            command: |
              cd scripts
              ./3_deploy.sh


  delete_statging_deploy:
    
    docker: 
      - image: circleci/openjdk:11-jdk 
    
    working_directory: ~/repo

    steps:
      
      - attach_workspace:
          at: ~/repo

      - run:
            name: Setup CF CLI 
            command: |
              curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
              sudo dpkg -i cf-cli_amd64.deb
              cf -v
              cf api ${CF_ENDPOINT}  # alternately target your private Cloud Foundry deployment
              cf auth "$CF_USER" "$CF_PASSWORD"
              cf target -o "$CF_ORG" -s "$CF_SPACE"

      - run:
            name: Remove Staging apps  
            command: | 
              cd scripts
              ./deleteListedApps.sh
      
      - run:
            name: Remove Services
            command: |
              cd scripts
              ./deleteListedServices.sh

  end_pipeline:

    docker:
      - image: circleci/openjdk:11-jdk 

    working_directory: ~/repo 

    stpes:
      - run: echo "END!!!!"    


   staging_load_test:

     docker:        
      - image: circleci/openjdk:11-jdk 

    working_directory: ~/repo 

    stpes:
      - run: echo "Do some load test here"    


workflows:
  version: 2
  build_and_test:
    jobs:
      - code_checkout

      - build_quotes_service:
          requires:
            - code_checkout

      - build_accounts_service:
          requires:
            - code_checkout

      - build_portfolio_service:
          requires:
            - code_checkout

      - build_user_service:
          requires:
            - code_checkout

      - build_web_ui:
          requires:
            - code_checkout

      - test_quotes_service:
          requires:
            - build_quotes_service

      - test_accounts_service:
          requires:
            - build_accounts_service

      - test_portfolio_service:
          requires:
            - build_portfolio_service

      - test_web_ui:
          requires:
            - build_web_ui

      - test_user_service:
          requires:
            - build_user_service

      - build_analytics_scdf_sink:
          requires:
            - test_quotes_service
            - test_accounts_service
            - test_portfolio_service
            - test_web_ui
            - test_user_service 

      - build_analytics_service:
          requires:
            - build_analytics_scdf_sink 

      - deploy_to_staging:
          requires:
            - test_quotes_service
            - test_accounts_service
            - test_portfolio_service
            - test_web_ui
            - test_user_service 

      - staging_load_test:
          requires:
            - deploy_to_staging 

      - delete_statging_deploy: 
          requires:
            - staging_load_test 
      
      - end_pipeline: 
          requires:
            - delete_statging_deploy 